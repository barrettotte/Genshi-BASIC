/* Grammar based on modified version of Commodore 64 BASICv2 */


expression  -> literal | unary | binary | grouping ;

literal     -> NUMERIC | STRING | IDENTIFIER ;
grouping    -> "(" expression ")" ;
unary       -> ( "-" | "NOT" ) expression ;
binary      -> expression operator expression ;

operator    -> "=" | "-" | "+" | "/" | "*" | "^" | ">" | "<" | "<>"
             | "<=" | "=>" | ">=" | "=>" | "XOR" | "OR" | "AND" | "MOD" 
             ;

bif         -> "ABS" | "ASC" | "ATN" | "CHR$" | "CLR" | "COS" | "END" | "EXP"
             | "INT" | "LEFT$" | "LEN" | "LOG" | "MID$" | "RIGHT$" | "RND" | "RETURN"
             | "SGN" | "SIN" | "SPC" | "SQR" | "STR$" | "TAB" | "TAN"
             ;

parameters  -> IDENTIFIER ( "," IDENTIFIER )* ;
arguments   -> expression ( "," expression )* ;

declaration -> func_dec | var_dec | arr_dec | statement ;

arr_dec     -> "DIM" IDENTIFIER "(" arguments ")" ;
func_dec    -> "DEF" "FN" IDENTIFIER "(" parameters? ")" "=" expression ;
var_dec     -> "LET" IDENTIFIER "=" expression ;

statement   -> for_stmt | func_stmt | go_stmt | if_stmt | print_stmt ;

for_stmt    -> "FOR" IDENTIFIER "=" expression "TO" expression ( STEP expression )? ;
func_stmt   -> ( IDENTIFIER | bif ) ( "(" arguments? ")" )? ;
go_stmt     -> ( "GOTO" | "GOSUB" ) expression ;
if_stmt     -> "IF" expression "THEN" statement ;
print_stmt  -> "PRINT" expression ;